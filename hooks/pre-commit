#!/usr/bin/env python

import sys
import os
import subprocess

'''
-----------------------
function: getResponse
-----------------------
params:
    parent: function to call in invalid response
        expected use: parent function passes itself through to getResponse for recursive loop
    prompt: string which is used as prompt to user
details:
    add Y/N to prompt for user input
    enable user input in git hook via sys.stdin variable
    prompt user
    interpret user input
        Y: return True
        N: return False
        else: invalid response, call parent (for recursive use of prompt)
return:
    boolean
    Y: True
    N: False
'''
def getResponse(parent, prompt):
    requested = "[Y/N] "
    sys.stdin = open('/dev/tty')
    response = raw_input(prompt + requested)
    if (response.upper() == "Y"):
        return True
    elif (response.upper() != "N"):
        print("Invalid response")
        parent()
    return False

'''
-----------------------
function: promptChanges
-----------------------
params:
    files: list of files which have been changed
details:
    check if changes made by autoformat
    prompt user if changes have/not been made
    list changed files
return:
    boolean
    changes: True
    no changes: False
'''
def promptChanges(files):
    size = len(files)
    prompt = "%o files have been changed." % size
    print(prompt)
    for file in files:
        print(file)
    if (size > 0):
        print("Run \"git diff <filename>\" to view changes.  Re-enter commit message when satisfied with style changes.")
        exit(1)
        return True
    return False


'''
-----------------------
function: autoFormat
-----------------------
details:
    call autoformatter tool for Typescript, JS, and JSON
return:
    string list
    list of changed file names
'''
def autoFormat():
    print("Auto formatting code")
    # get files
    output = subprocess.check_output('git diff --name-only --cached', shell=True)
    # split files by line for list
    files = output.split("\n")
    # remove empty value
    files.remove("")
    # prep change list for files to be added to
    changeList = []
    # iterate file list and run command
    for file in files:
        # check to prevent hooks folder from formatting
        size = len(file)
        if (file[0:5] != "hooks"):
            # generate command
            command = 'npm run lint:fix --first=%s' % file
            # grab file contents
            exists = os.path.isfile(file)
            preFormat = ""
            if exists:
                preFormat = open(file,"r").read()
            # run command on file
            os.system(command)
            # grab new file contents
            postFormat = ""
            if exists:
                postFormat = open(file,"r").read()
            # compare and append to changeList if not equal
            if (preFormat != postFormat):
                changeList.append(file)

    return changeList


'''
-----------------------
function: promptUnitTests
-----------------------
details:
    create prompt to run unit tests
    call getResponse to create response:
        pass function, prompt
return:
    string
    response
'''
def promptUnitTests():
    prompt = "Do you want to run unit testing? "
    response = getResponse(promptUnitTests, prompt)
    return response


'''
-----------------------
function: runUnitTests
-----------------------
params:
    run: boolean which defines whether unit tests should run
details:
    check if unit tests desired to be run
        run all unit tests
        check if unit tests failed
            return False
return:
    boolean
    success/don't run: True
    failure: False
'''
def runUnitTests(run):
    if (run == True):
        print("Running unit tests")
        #TODO: run unit tests
        # os.system('npm run test')
    return True
'''
-----------------------
function: main
-----------------------
details:
    check if new change has been made
        abort push and exit with error
'''
def main():
    files = autoFormat()

    promptChanges(files)

    run = promptUnitTests()
    runUnitTests(run)


if __name__ == "__main__":
  main()
